#!/bin/bash
#
# This script checks if a postgres server is healthy running on localhost. It will return:
# "HTTP/1.x 200 OK\r" (if postgres is running smoothly)
# - OR -
# "HTTP/1.x 500 Internal Server Error\r" (else)
# The purpose of this script is make haproxy capable of monitoring postgres properly
# It is recommended that a low-privileged postgres  user is created to be used by this script.
# For eg. create  user healthchkusr login password 'hc321';
#
# Changed 2023-05-23 by Roy Sigurd Karlsbakk <roy@karlsbakk.net>>
# General cleanup, use $() instead of `` and make sure to set Content-Length
# to avoid errors indicating connection reset by peer.
 
PGBIN="psql"
PGSQL_HOST="localhost"
PGSQL_PORT="5432"
PGSQL_DATABASE="postgres"
PGSQL_USERNAME="thatfineusername"
PGPASSWORD="supersecret"
HEADER_FILE=$( mktemp )
CONTENT_FILE=$( mktemp )

# Make this visible to the chlid process
export PGPASSWORD

# We perform a simple query that should return a few results
VALUE=$( $PGBIN -t -h $PGSQL_HOST -U $PGSQL_USERNAME -p $PGSQL_PORT -c"select pg_is_in_recovery()" $PGSQL_DATABASE 2> /dev/null )
 
# Check the output and generate header and content files.
if [ $VALUE == "t" ]
then
    printf "HTTP/1.1 206 OK\r\n" >> $HEADER_FILE
    printf "Standby" >> $CONTENT_FILE
elif [ $VALUE == "f" ]
then
    printf "HTTP/1.1 200 OK\r\n" >> $HEADER_FILE
    printf "Primary" >> $CONTENT_FILE
else
    printf "HTTP/1.1 503 Service Unavailable\r\n" >> $HEADER_FILE
    printf "DB Down" >> $CONTENT_FILE
fi

printf "\r\n" >> $CONTENT_FILE

content_length=$( wc -c $CONTENT_FILE | awk '{ print $1 }' )

printf "Content-Type: text/plain\r\n" >> $HEADER_FILE
printf "Content-Length: $content_length\r\n" >> $HEADER_FILE
printf "\r\n" >> $HEADER_FILE

# Play webserver
cat $HEADER_FILE $CONTENT_FILE

# Clean up and bugger off
rm -f $HEADER_FILE $CONTENT_FILE
